// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Pool {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String  @unique
  teams            Team[]
  matchesCompleted Int     @default(0)
  matches          Match[]
  sets             Int     @default(2)
  pointsPerSet     Int     @default(21)
}

model Team {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  pool        Pool    @relation(fields: [poolID], references: [id], onDelete: Cascade)
  poolID      String  @db.ObjectId
  wins        Int     @default(0)
  losses      Int     @default(0)
  pointDiff   Int     @default(0)
  matches1    Match[] @relation("team1")
  matches2    Match[] @relation("team2")
  workMatches Match[] @relation("workTeam")
  index       Int     @default(0)
}

model Match {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  poolID     String  @db.ObjectId
  pool       Pool    @relation(fields: [poolID], references: [id], onDelete: Cascade)
  pointDiff  Int     @default(0)
  sets       Set[]
  finished   Boolean @default(false)
  index      Int     @default(0)
  team1ID    String  @db.ObjectId
  team1      Team    @relation("team1", fields: [team1ID], references: [id], onDelete: Cascade)
  team2ID    String  @db.ObjectId
  team2      Team    @relation("team2", fields: [team2ID], references: [id], onDelete: Cascade)
  workTeamID String  @db.ObjectId
  workTeam   Team    @relation("workTeam", fields: [workTeamID], references: [id], onDelete: Cascade)
}

model Set {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  matchID    String  @db.ObjectId
  match      Match   @relation(fields: [matchID], references: [id], onDelete: Cascade)
  team1Score Int     @default(0)
  team2Score Int     @default(0)
  finished   Boolean @default(false)
  index      Int     @default(0)
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  accounts Account[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}